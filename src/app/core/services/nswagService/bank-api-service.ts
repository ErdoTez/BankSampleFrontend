//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BANK_API_BASE_URL = new InjectionToken<string>('BANK_API_BASE_URL');

@Injectable()
export class BankApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BANK_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addSales(body: AddSalesReq | undefined): Observable<AddSalesRes> {
        let url_ = this.baseUrl + "/api/Sales/AddSales";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddSales(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddSales(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddSalesRes>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddSalesRes>;
        }));
    }

    protected processAddSales(response: HttpResponseBase): Observable<AddSalesRes> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddSalesRes.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = AddSalesRes.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddSalesRes>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    salesList(body: SalesListReq | undefined): Observable<SalesListRes> {
        let url_ = this.baseUrl + "/api/Sales/SalesList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSalesList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSalesList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SalesListRes>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SalesListRes>;
        }));
    }

    protected processSalesList(response: HttpResponseBase): Observable<SalesListRes> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SalesListRes.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = SalesListRes.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SalesListRes>(null as any);
    }
}

export class AddSalesReq implements IAddSalesReq {
    cardHolderName!: string;
    cardNumber!: string;
    expiryDate!: number;
    priceAmount!: number;

    constructor(data?: IAddSalesReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardHolderName = _data["cardHolderName"];
            this.cardNumber = _data["cardNumber"];
            this.expiryDate = _data["expiryDate"];
            this.priceAmount = _data["priceAmount"];
        }
    }

    static fromJS(data: any): AddSalesReq {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalesReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardHolderName"] = this.cardHolderName;
        data["cardNumber"] = this.cardNumber;
        data["expiryDate"] = this.expiryDate;
        data["priceAmount"] = this.priceAmount;
        return data;
    }
}

export interface IAddSalesReq {
    cardHolderName: string;
    cardNumber: string;
    expiryDate: number;
    priceAmount: number;
}

export class AddSalesRes implements IAddSalesRes {
    isSuccess?: boolean;
    resultMessage?: string | undefined;
    resultCode?: ResultCode;
    cardNumber?: string | undefined;
    priceAmount?: number;
    transactionId?: number;
    transactionTime?: Date;

    constructor(data?: IAddSalesRes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.resultMessage = _data["resultMessage"];
            this.resultCode = _data["resultCode"];
            this.cardNumber = _data["cardNumber"];
            this.priceAmount = _data["priceAmount"];
            this.transactionId = _data["transactionId"];
            this.transactionTime = _data["transactionTime"] ? new Date(_data["transactionTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AddSalesRes {
        data = typeof data === 'object' ? data : {};
        let result = new AddSalesRes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["resultMessage"] = this.resultMessage;
        data["resultCode"] = this.resultCode;
        data["cardNumber"] = this.cardNumber;
        data["priceAmount"] = this.priceAmount;
        data["transactionId"] = this.transactionId;
        data["transactionTime"] = this.transactionTime ? this.transactionTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAddSalesRes {
    isSuccess?: boolean;
    resultMessage?: string | undefined;
    resultCode?: ResultCode;
    cardNumber?: string | undefined;
    priceAmount?: number;
    transactionId?: number;
    transactionTime?: Date;
}

export enum ResultCode {
    _0 = 0,
    __1 = -1,
}

export class SalesListDetail implements ISalesListDetail {
    id?: number;
    createdBy?: number;
    updatedBy?: number;
    createdAt?: Date;
    updatedAt?: Date;
    transactionId?: number;
    cardholderName?: string | undefined;
    pan?: string | undefined;
    expiryDate?: number;
    amount?: number;
    cardType?: number;

    constructor(data?: ISalesListDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdBy = _data["createdBy"];
            this.updatedBy = _data["updatedBy"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.transactionId = _data["transactionId"];
            this.cardholderName = _data["cardholderName"];
            this.pan = _data["pan"];
            this.expiryDate = _data["expiryDate"];
            this.amount = _data["amount"];
            this.cardType = _data["cardType"];
        }
    }

    static fromJS(data: any): SalesListDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SalesListDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdBy"] = this.createdBy;
        data["updatedBy"] = this.updatedBy;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["transactionId"] = this.transactionId;
        data["cardholderName"] = this.cardholderName;
        data["pan"] = this.pan;
        data["expiryDate"] = this.expiryDate;
        data["amount"] = this.amount;
        data["cardType"] = this.cardType;
        return data;
    }
}

export interface ISalesListDetail {
    id?: number;
    createdBy?: number;
    updatedBy?: number;
    createdAt?: Date;
    updatedAt?: Date;
    transactionId?: number;
    cardholderName?: string | undefined;
    pan?: string | undefined;
    expiryDate?: number;
    amount?: number;
    cardType?: number;
}

export class SalesListReq implements ISalesListReq {
    processBeginTime?: Date | undefined;
    processEndTime?: Date | undefined;
    minPriceAmount?: number | undefined;
    maxPriceAmount?: number | undefined;

    constructor(data?: ISalesListReq) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.processBeginTime = _data["processBeginTime"] ? new Date(_data["processBeginTime"].toString()) : <any>undefined;
            this.processEndTime = _data["processEndTime"] ? new Date(_data["processEndTime"].toString()) : <any>undefined;
            this.minPriceAmount = _data["minPriceAmount"];
            this.maxPriceAmount = _data["maxPriceAmount"];
        }
    }

    static fromJS(data: any): SalesListReq {
        data = typeof data === 'object' ? data : {};
        let result = new SalesListReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["processBeginTime"] = this.processBeginTime ? this.processBeginTime.toISOString() : <any>undefined;
        data["processEndTime"] = this.processEndTime ? this.processEndTime.toISOString() : <any>undefined;
        data["minPriceAmount"] = this.minPriceAmount;
        data["maxPriceAmount"] = this.maxPriceAmount;
        return data;
    }
}

export interface ISalesListReq {
    processBeginTime?: Date | undefined;
    processEndTime?: Date | undefined;
    minPriceAmount?: number | undefined;
    maxPriceAmount?: number | undefined;
}

export class SalesListRes implements ISalesListRes {
    isSuccess?: boolean;
    resultMessage?: string | undefined;
    resultCode?: ResultCode;
    salesListDetail?: SalesListDetail[] | undefined;

    constructor(data?: ISalesListRes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.resultMessage = _data["resultMessage"];
            this.resultCode = _data["resultCode"];
            if (Array.isArray(_data["salesListDetail"])) {
                this.salesListDetail = [] as any;
                for (let item of _data["salesListDetail"])
                    this.salesListDetail!.push(SalesListDetail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesListRes {
        data = typeof data === 'object' ? data : {};
        let result = new SalesListRes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["resultMessage"] = this.resultMessage;
        data["resultCode"] = this.resultCode;
        if (Array.isArray(this.salesListDetail)) {
            data["salesListDetail"] = [];
            for (let item of this.salesListDetail)
                data["salesListDetail"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISalesListRes {
    isSuccess?: boolean;
    resultMessage?: string | undefined;
    resultCode?: ResultCode;
    salesListDetail?: SalesListDetail[] | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}